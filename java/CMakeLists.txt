cmake_minimum_required(VERSION 3.22)

project(ShoreJava LANGUAGES CXX)

# Contains the names of the java files that are generated by swig
include(filelist.cmake)
include(../cmake_common/embed.cmake)

set(ANDROID_BUILD false CACHE BOOL "Checked if the Java bindings are only \
                            built as an intermediate step for Android")
set(SHORE_SDK_PATH ${CMAKE_SOURCE_DIR}/ShoreSDK CACHE PATH "Select path to SHORE SDK!")
set(SHORE_VERSION 310 CACHE STRING "Select required version of SHORE!" )
set(SHORE_LIB_PREFIX CACHE STRING
    "Select Shore lib Prefix(e.g. Win32|Win64|Linux_x64|Linux_x86|Linux_armv7hf).\
     Leave empty to autodetect")
set(BUILD_JAVADOC false CACHE BOOL "Enable to automatically generate java \
                       documentation from the C++ header files (experimental)")

file(GLOB_RECURSE SHORE_LIB_PATH_SHARED LIST_DIRECTORIES=false
    ${SHORE_SDK_PATH}/Lib/${SHORE_LIB_PREFIX}*/${CMAKE_SHARED_LIBRARY_PREFIX}Shore${SHORE_VERSION}${CMAKE_SHARED_LIBRARY_SUFFIX}
)
file(GLOB_RECURSE SHORE_LIB_PATH_STATIC LIST_DIRECTORIES=false
    ${SHORE_SDK_PATH}/Lib/${SHORE_LIB_PREFIX}*/${CMAKE_STATIC_LIBRARY_PREFIX}Shore${SHORE_VERSION}${CMAKE_STATIC_LIBRARY_SUFFIX}
)

if (SHORE_LIB_PATH_SHARED AND NOT SHORE_LIB_PATH_STATIC)
    set (SHORE_LIB_TYPE SHARED)
    set (SHORE_LIB_PATH ${SHORE_LIB_PATH_SHARED})
elseif (SHORE_LIB_PATH_STATIC AND NOT SHORE_LIB_PATH_SHARED)
    set (SHORE_LIB_TYPE STATIC)
    set (SHORE_LIB_PATH ${SHORE_LIB_PATH_STATIC})
elseif (SHORE_LIB_PATH_SHARED AND SHORE_LIB_PATH_STATIC AND WIN32)
    set (SHORE_LIB_TYPE SHARED)
    set (SHORE_LIB_PATH ${SHORE_LIB_PATH_SHARED})
elseif( NOT SHORE_LIB_PATH_SHARED AND NOT SHORE_LIB_PATH_STATIC )
    message( FATAL_ERROR "SHORE library not found")
else()
    message(FATAL_ERROR "Unexpectedly found both, static and shared version of Shore")
endif()

add_library(shore ${SHORE_LIB_TYPE} IMPORTED GLOBAL)
if( SHORE_LIB_PATH AND (NOT SHORE_LIB_PATH STREQUAL ""))
    message( STATUS "Found SHORE: ${SHORE_LIB_PATH}")
else()
    message(FATAL_ERROR "SHORE library not found")
endif()

get_filename_component(SHORE_LIB_DIR ${SHORE_LIB_PATH} DIRECTORY)

FILE(GLOB SHORE_MODEL_SOURCE ${SHORE_SDK_PATH}/Model/*.cpp)
FILE(GLOB ADDITIONAL_SRC_FILES ${CMAKE_SOURCE_DIR}/*.cpp)

set (SHORE_MODEL_CTM
    ${SHORE_SDK_PATH}/Model/ShapeLocator_68_2018_01_17_094200.ctm
)
set (SHORE_CREATE_FACE_ENGINE_CPP ${SHORE_SDK_PATH}/Lib/CreateFaceEngine.cpp)
set (SHORE_INCLUDE_DIR ${SHORE_SDK_PATH}/Lib)

find_package(Java 1.8 COMPONENTS Development)
if( NOT JAVA_FOUND )
    message(FATAL_ERROR "Java not found" )
else()
    include(UseJava)
endif()

find_package(JNI)
if( NOT JNI_FOUND )
    message(FATAL_ERROR "JNI dependencies not found" )
endif()

find_package(SWIG 4.0 )
if(NOT SWIG_FOUND)
    message(FATAL_ERROR "SWIG not found")
else()
    include (UseSWIG)
endif()

add_definitions(-DSHORE_REGISTER_MODELS)

if(WIN32)
elseif(UNIX AND NOT APPLE)
    add_compile_options(-O2 -fexpensive-optimizations -pthread -DLINUX -fPIC
                        -D_GLIBCXX_HAVE_GTHR_DEFAULT=_GLIBCXX_HAS_GTHREADS
                        -Wno-narrowing -fpermissive -I /usr/include/)
    add_link_options(-z noexecstack)
endif()

if(NOT ANDROID_BUILD)
    embed_binary(SOURCES ${SHORE_MODEL_CTM} ABI "x86_64" OUTPUT SHAPELOCATORLIB)
endif()

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(CMAKE_INSTALL_RPATH ".")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

list(APPEND SOURCES "Shore.i")
list(APPEND SOURCES ${SHORE_MODEL_SOURCE})
list(APPEND SOURCES ${SHORE_CREATE_FACE_ENGINE_CPP} ${ADDITIONAL_SRC_FILES})

set_property(SOURCE "Shore.i" PROPERTY CPLUSPLUS ON)
set(CMAKE_SWIG_FLAGS -package de.fraunhofer.iis.shore.wrapper)
if(BUILD_JAVADOC)
    set(CMAKE_SWIG_FLAGS ${CMAKE_SWIG_FLAGS} -doxygen)
endif()

swig_add_library(ShoreWrapper TYPE ${SHORE_LIB_TYPE} OUTPUT_DIR
                 "${CMAKE_BINARY_DIR}/javagen/" LANGUAGE Java SOURCES ${SOURCES})
set_property(DIRECTORY PROPERTY
             ADDITIONAL_MAKE_CLEAN_FILES ${CMAKE_BINARY_DIR}/javagen)

# can be use to include additional jar dependencies
set(ADDITIONAL_JAR_DEPS "")
set(ADDITIONAL_JAVA_SOURCES "IMessageCallback.java")
list(APPEND ADDITIONAL_JAVA_SOURCES "IModelQueryCallback.java")

if(NOT ANDROID_BUILD)
    # if we're not building for Android, we need to link the "swig library"
    # against the Shore library
    swig_link_libraries(ShoreWrapper ${SHORE_LIB_PATH} ${SHAPELOCATORLIB})
endif()

set_property(TARGET ShoreWrapper PROPERTY SWIG_USE_TARGET_INCLUDE_DIRECTORIES TRUE)
target_include_directories(ShoreWrapper PUBLIC ${SHORE_INCLUDE_DIR} ${JNI_INCLUDE_DIRS})

list(TRANSFORM JAVA_GEN_SOURCES PREPEND "${CMAKE_BINARY_DIR}/javagen/")

#this is the actual ShoreJava jar file that can be used in custom applications
add_jar(ShoreJavaWrapper
    SOURCES ${JAVA_GEN_SOURCES} ${ADDITIONAL_JAVA_SOURCES}
        INCLUDE_JARS ${ADDITIONAL_JAR_DEPS})

# this is the command line demo
add_jar(ShoreCmdline
        SOURCES ShoreCmdline.java
        INCLUDE_JARS ShoreJavaWrapper ${ADDITIONAL_JAR_DEPS}
        MANIFEST MANIFEST.MF)

if(BUILD_JAVADOC)
    file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/javadoc")
    Add_custom_target(JavaDoc ALL
        COMMAND javadoc -Xdoclint:none -d javadoc/ ${JAVA_GEN_SOURCES}
                ${CMAKE_SOURCE_DIR}/IMessageCallback.java
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR})
endif()

add_dependencies(ShoreJavaWrapper ShoreWrapper)
add_dependencies(ShoreCmdline ShoreJavaWrapper)
add_dependencies(ShoreCmdline ShoreWrapper)
if(BUILD_JAVADOC)
    add_dependencies(JavaDoc ShoreJavaWrapper)
endif()

set(INSTALL_DIR ${CMAKE_SOURCE_DIR}/INSTALL)

install_jar(ShoreJavaWrapper ${INSTALL_DIR})
install_jar(ShoreCmdline ${INSTALL_DIR})
install(TARGETS ShoreWrapper DESTINATION ${INSTALL_DIR})
install(FILES ${SHORE_LIB_PATH} sample.png
        DESTINATION ${INSTALL_DIR})
if(BUILD_JAVADOC)
    install(DIRECTORY "${CMAKE_BINARY_DIR}/javadoc" DESTINATION ${INSTALL_DIR})
endif()

